// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  CLIENTE
  PROFISSIONAL
}

enum Status {
  PENDENTE
  CONFIRMADO
  CANCELADO
  CONCLUIDO
}

enum BonusType {
  BOOKING_POINTS // Pontos por agendamento
  LOYALTY // Fidelidade (ex.: após X agendamentos)
}

// Tabelas principais
model User {
  id            String   @id @default(uuid())
  nome          String
  email         String   @unique
  senha         String
  telefone      String?
  role          Role     @default(CLIENTE)
  emailVerified Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relações
  professional       Professional?
  bookings           Booking[]
  VerificationToken  VerificationToken[]
  Log                Log[]
  PasswordResetToken PasswordResetToken[]
  UserBonus          UserBonus[]
  BonusTransaction   BonusTransaction[]
  BonusRedemption    BonusRedemption[]

  @@map("users")
}

model Professional {
  id                    String                 @id @default(uuid())
  userId                String                 @unique
  user                  User                   @relation(fields: [userId], references: [id])
  especialidade         String
  bio                   String?
  avatarUrl             String?
  documento             String?
  ativo                 Boolean                @default(true)
  bookings              Booking[]
  horariosFuncionamento HorarioFuncionamento[]
  feriados              Feriado[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  ServiceProfessional   ServiceProfessional[]

  @@map("professionals")
}

model HorarioFuncionamento {
  id             String       @id @default(uuid())
  profissional   Professional @relation(fields: [profissionalId], references: [id])
  profissionalId String
  diaSemana      Int // 0-6 (Domingo-Sábado)
  abreAs         String // Formato "HH:MM"
  fechaAs        String // Formato "HH:MM"
  pausaInicio    String? // Formato "HH:MM"
  pausaFim       String? // Formato "HH:MM"
  ativo          Boolean      @default(true)

  @@unique([profissionalId, diaSemana])
  @@map("business_hours")
}

model Feriado {
  id             String       @id @default(uuid())
  profissional   Professional @relation(fields: [profissionalId], references: [id])
  profissionalId String
  data           DateTime // Data específica
  motivo         String
  createdAt      DateTime     @default(now())

  @@index([profissionalId, data])
  @@map("holidays")
}

model Service {
  id            String                @id @default(uuid())
  nome          String
  descricao     String?
  categoria     String?
  ativo         Boolean               @default(true)
  profissionais ServiceProfessional[]
  BookingItem   BookingItem[]
  updatedAt     DateTime              @updatedAt
  createdAt     DateTime              @default(now())

  @@map("services")
}

model ServiceProfessional {
  id             String        @id @default(uuid())
  service        Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId      String
  professional   Professional  @relation(fields: [professionalId], references: [id])
  professionalId String
  preco          Float
  duracao        Int
  BookingItem    BookingItem[]

  @@map("service_professional")
}

model Booking {
  id               String             @id @default(uuid())
  user             User               @relation(fields: [usuarioId], references: [id])
  usuarioId        String
  profissional     Professional       @relation(fields: [profissionalId], references: [id])
  profissionalId   String
  dataHoraInicio   DateTime
  dataHoraFim      DateTime
  status           Status             @default(PENDENTE)
  observacoes      String?
  valorFinal       Float
  pontosUtilizados Int                @default(0) // Novo campo
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  canceledAt       DateTime?
  confirmedAt      DateTime?
  items            BookingItem[]
  BonusTransaction BonusTransaction[]
  BonusRedemption  BonusRedemption[]

  @@map("bookings")
}

model BookingItem {
  id                    String              @id @default(uuid())
  booking               Booking             @relation(fields: [bookingId], references: [id])
  bookingId             String
  serviceProfessional   ServiceProfessional @relation(fields: [serviceProfessionalId], references: [id])
  serviceProfessionalId String

  nome      String
  preco     Float
  duracao   Int
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?

  @@map("booking_items")
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_tokens")
}

model Log {
  id         String   @id @default(uuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String? // Quem fez a ação (pode ser nulo para sistema)
  tipo       String // Tipo do evento: "STATUS_UPDATE", "CANCELAMENTO", etc.
  descricao  String // Texto explicativo do que aconteceu
  referencia String? // ID da entidade afetada (ex: bookingId, serviceId etc)
  entidade   String? // Nome da entidade: "Booking", "Service", "User"
  userAgent  String? // Navegador ou client info (opcional)
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([entidade, referencia])
  @@map("logs")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
}

// Tabela para armazenar os bônus dos usuários
model UserBonus {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  points    Int       @default(0)
  type      BonusType
  expiresAt DateTime? // Opcional: definir validade dos pontos
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, type])
  @@index([expiresAt])
  @@map("user_bonus")
}

// Tabela para registrar transações de pontos
model BonusTransaction {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  booking     Booking?  @relation(fields: [bookingId], references: [id])
  bookingId   String?
  points      Int // Pode ser positivo (ganho) ou negativo (uso)
  type        BonusType
  operation   String    @default("CREDIT") // "CREDIT" ou "DEBIT"
  description String? // Ex.: "Resgate de pontos para agendamento "
  createdAt   DateTime  @default(now())

  @@map("bonus_transactions")
}

model BonusRedemption {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  String
  pointsUsed Int
  discount   Float // Valor do desconto aplicado em reais
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([bookingId])
  @@map("bonus_redemptions")
}
