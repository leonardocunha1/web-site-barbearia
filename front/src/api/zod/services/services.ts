/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Barber Shop
 * API para agendamento de servi√ßos de barbearia
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


export const createServiceBody = zod.object({
  "nome": zod.string(),
  "descricao": zod.string().optional(),
  "categoria": zod.string().optional()
})

export const listServicesQueryPageDefault = 1;
export const listServicesQueryPageMin = 0;
export const listServicesQueryLimitDefault = 10;
export const listServicesQueryLimitMin = 0;

export const listServicesQueryLimitMax = 100;


export const listServicesQueryParams = zod.object({
  "page": zod.number().min(listServicesQueryPageMin).default(listServicesQueryPageDefault),
  "limit": zod.number().min(listServicesQueryLimitMin).max(listServicesQueryLimitMax).default(listServicesQueryLimitDefault),
  "nome": zod.string().optional(),
  "categoria": zod.string().optional(),
  "ativo": zod.boolean().optional(),
  "professionalId": zod.string().uuid().optional()
})

export const listServicesResponse = zod.object({
  "services": zod.array(zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string(),
  "descricao": zod.string().optional(),
  "categoria": zod.string().optional(),
  "ativo": zod.boolean(),
  "createdAt": zod.string().datetime({}),
  "updatedAt": zod.string().datetime({})
})),
  "pagination": zod.object({
  "page": zod.number(),
  "limit": zod.number(),
  "total": zod.number(),
  "totalPages": zod.number()
})
})

export const getServiceByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getServiceByIdResponse = zod.object({
  "service": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string(),
  "descricao": zod.string().optional(),
  "categoria": zod.string().optional(),
  "ativo": zod.boolean(),
  "createdAt": zod.string().datetime({}),
  "updatedAt": zod.string().datetime({}),
  "profissionais": zod.array(zod.object({
  "id": zod.string().uuid(),
  "professional": zod.object({
  "id": zod.string().uuid(),
  "user": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string()
})
})
}))
})
})

export const updateServiceByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const updateServiceByIdBodyNomeMin = 3;
export const updateServiceByIdBodyPrecoPadraoMin = 0;
export const updateServiceByIdBodyDuracaoMin = 0;


export const updateServiceByIdBody = zod.object({
  "nome": zod.string().min(updateServiceByIdBodyNomeMin).optional(),
  "descricao": zod.string().optional(),
  "precoPadrao": zod.number().min(updateServiceByIdBodyPrecoPadraoMin).optional(),
  "duracao": zod.number().min(updateServiceByIdBodyDuracaoMin).optional(),
  "categoria": zod.string().optional(),
  "ativo": zod.boolean().optional()
})

export const updateServiceByIdResponse = zod.object({
  "service": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string(),
  "descricao": zod.string().optional(),
  "categoria": zod.string().optional(),
  "ativo": zod.boolean(),
  "createdAt": zod.string().datetime({}),
  "updatedAt": zod.string().datetime({})
})
})

export const deleteServiceByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const deleteServiceByIdQueryPermanentDefault = false;

export const deleteServiceByIdQueryParams = zod.object({
  "permanent": zod.boolean().optional()
})

export const toggleServiceStatusByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const toggleServiceStatusByIdResponse = zod.enum(['null']).nullable().describe('Status do servi√ßo atualizado com sucesso.')

