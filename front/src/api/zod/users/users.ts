/**
 * Generated by orval v7.10.0 游꽄
 * Do not edit manually.
 * API Barber Shop
 * API para agendamento de servi칞os de barbearia
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * Retorna o perfil do usu치rio logado.
 */
export const getUserProfileResponse = zod.object({
  "user": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string(),
  "email": zod.string().email().optional(),
  "telefone": zod.string().nullish(),
  "role": zod.enum(['CLIENTE', 'PROFISSIONAL', 'ADMIN']).optional(),
  "emailVerified": zod.boolean(),
  "active": zod.boolean(),
  "createdAt": zod.string().datetime({})
})
})

/**
 * Atualiza o perfil do usu치rio logado.
 */
export const updateUserProfileBodyNomeMin = 3;


export const updateUserProfileBody = zod.object({
  "nome": zod.string().min(updateUserProfileBodyNomeMin).optional(),
  "email": zod.string().email().optional(),
  "telefone": zod.string().nullish()
})

export const updateUserProfileResponse = zod.enum(['null']).nullable().describe('Usu치rio atualizado com sucesso.')

/**
 * Listar usu치rios
 */
export const listUsersQueryPageDefault = 1;
export const listUsersQueryPageMin = 0;
export const listUsersQueryLimitDefault = 10;
export const listUsersQueryLimitMin = 0;

export const listUsersQueryLimitMax = 100;


export const listUsersQueryParams = zod.object({
  "page": zod.number().min(listUsersQueryPageMin).default(listUsersQueryPageDefault),
  "limit": zod.number().min(listUsersQueryLimitMin).max(listUsersQueryLimitMax).default(listUsersQueryLimitDefault),
  "role": zod.enum(['ADMIN', 'CLIENTE', 'PROFISSIONAL']).optional(),
  "name": zod.string().optional()
})

export const listUsersResponse = zod.object({
  "users": zod.array(zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string(),
  "email": zod.string().email().optional(),
  "telefone": zod.string().nullish(),
  "role": zod.enum(['CLIENTE', 'PROFISSIONAL', 'ADMIN']).optional(),
  "emailVerified": zod.boolean(),
  "active": zod.boolean(),
  "createdAt": zod.string().datetime({})
})),
  "page": zod.number(),
  "limit": zod.number(),
  "total": zod.number(),
  "totalPages": zod.number()
})

/**
 * Anonimiza um usu치rio.
 */
export const anonymizeUserParams = zod.object({
  "userId": zod.string().uuid()
})

/**
 * Atualiza a senha do usu치rio logado.
 */
export const updateUserPasswordBodyCurrentPasswordMin = 6;
export const updateUserPasswordBodyNewPasswordMin = 6;


export const updateUserPasswordBody = zod.object({
  "currentPassword": zod.string().min(updateUserPasswordBodyCurrentPasswordMin),
  "newPassword": zod.string().min(updateUserPasswordBodyNewPasswordMin)
})

export const updateUserPasswordResponse = zod.enum(['null']).nullable().describe('Senha atualizada com sucesso.')

/**
 * Verifica o e-mail do usu치rio.
 */
export const verifyUserEmailQueryParams = zod.object({
  "token": zod.string().uuid()
})

export const verifyUserEmailResponse = zod.object({
  "message": zod.string()
})

/**
 * Envia um e-mail de verifica칞칚o.
 */
export const sendUserVerificationEmailBody = zod.object({
  "email": zod.string().email()
})

export const sendUserVerificationEmailResponse = zod.object({
  "message": zod.string()
})

/**
 * Envia um e-mail para redefini칞칚o de senha.
 */
export const sendForgotPasswordEmailBody = zod.object({
  "email": zod.string().email()
})

export const sendForgotPasswordEmailResponse = zod.object({
  "message": zod.string()
})

/**
 * Redefine a senha do usu치rio.
 */
export const resetUserPasswordBodyNewPasswordMin = 6;


export const resetUserPasswordBody = zod.object({
  "token": zod.string(),
  "newPassword": zod.string().min(resetUserPasswordBodyNewPasswordMin)
})

export const resetUserPasswordResponse = zod.object({
  "message": zod.string()
})

