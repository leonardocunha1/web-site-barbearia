/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Barber Shop
 * API para agendamento de servi√ßos de barbearia
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


export const createProfessionalBodyEspecialidadeMin = 3;


export const createProfessionalBody = zod.object({
  "userId": zod.string().uuid(),
  "especialidade": zod.string().min(createProfessionalBodyEspecialidadeMin),
  "bio": zod.string().optional(),
  "documento": zod.string().optional(),
  "registro": zod.string().optional(),
  "avatarUrl": zod.string().url().optional()
})

export const listOrSearchProfessionalsQueryPageDefault = 1;
export const listOrSearchProfessionalsQueryPageMin = 0;
export const listOrSearchProfessionalsQueryLimitDefault = 10;
export const listOrSearchProfessionalsQueryLimitMin = 0;

export const listOrSearchProfessionalsQueryLimitMax = 100;
export const listOrSearchProfessionalsQueryQueryMin = 2;
export const listOrSearchProfessionalsQueryAtivoDefault = true;

export const listOrSearchProfessionalsQueryParams = zod.object({
  "page": zod.number().min(listOrSearchProfessionalsQueryPageMin).default(listOrSearchProfessionalsQueryPageDefault),
  "limit": zod.number().min(listOrSearchProfessionalsQueryLimitMin).max(listOrSearchProfessionalsQueryLimitMax).default(listOrSearchProfessionalsQueryLimitDefault),
  "query": zod.string().min(listOrSearchProfessionalsQueryQueryMin),
  "ativo": zod.boolean().default(listOrSearchProfessionalsQueryAtivoDefault)
})

export const listOrSearchProfessionalsResponse = zod.object({
  "professionals": zod.array(zod.object({
  "id": zod.string().uuid(),
  "especialidade": zod.string(),
  "bio": zod.string().optional(),
  "avatarUrl": zod.string().optional(),
  "ativo": zod.boolean().optional(),
  "user": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string(),
  "email": zod.string().email(),
  "telefone": zod.string().nullish()
}),
  "services": zod.array(zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string(),
  "descricao": zod.string().optional()
}))
})),
  "total": zod.number(),
  "page": zod.number(),
  "limit": zod.number(),
  "totalPages": zod.number()
})

export const updateProfessionalParams = zod.object({
  "id": zod.string().uuid()
})

export const updateProfessionalBodyEspecialidadeMin = 3;


export const updateProfessionalBody = zod.object({
  "especialidade": zod.string().min(updateProfessionalBodyEspecialidadeMin).optional(),
  "bio": zod.string().nullish(),
  "documento": zod.string().nullish(),
  "registro": zod.string().nullish(),
  "ativo": zod.boolean().optional(),
  "avatarUrl": zod.string().url().nullish()
})

export const updateProfessionalResponse = zod.object({
  "message": zod.string()
})

export const toggleProfessionalStatusParams = zod.object({
  "id": zod.string().uuid()
})

export const toggleProfessionalStatusResponse = zod.object({
  "message": zod.string()
})

export const getProfessionalDashboardQueryParams = zod.object({
  "range": zod.enum(['today', 'week', 'month', 'custom']),
  "startDate": zod.string().datetime({}).optional(),
  "endDate": zod.string().datetime({}).optional()
})

export const getProfessionalDashboardResponse = zod.object({
  "professional": zod.object({
  "name": zod.string(),
  "specialty": zod.string(),
  "avatarUrl": zod.string().nullable()
}),
  "metrics": zod.object({
  "appointments": zod.number(),
  "earnings": zod.number(),
  "canceled": zod.number(),
  "completed": zod.number()
}),
  "nextAppointments": zod.array(zod.object({
  "id": zod.string().uuid(),
  "date": zod.string().datetime({}),
  "clientName": zod.string(),
  "service": zod.string(),
  "status": zod.enum(['PENDENTE', 'CONFIRMADO'])
}))
})

export const getProfessionalScheduleQueryDateRegExp = new RegExp('^\\d{4}-\\d{2}-\\d{2}$');


export const getProfessionalScheduleQueryParams = zod.object({
  "professionalId": zod.string().uuid(),
  "date": zod.string().regex(getProfessionalScheduleQueryDateRegExp)
})

export const getProfessionalScheduleResponse = zod.object({
  "date": zod.string(),
  "timeSlots": zod.array(zod.object({
  "time": zod.string(),
  "available": zod.boolean(),
  "booking": zod.object({
  "id": zod.string(),
  "clientName": zod.string(),
  "services": zod.array(zod.string())
}).optional()
})),
  "businessHours": zod.object({
  "openAt": zod.string(),
  "closeAt": zod.string(),
  "breakStart": zod.string().optional(),
  "breakEnd": zod.string().optional()
})
})

