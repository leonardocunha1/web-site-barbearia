/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * API Barber Shop
 * API para agendamento de servi√ßos de barbearia
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod';


/**
 * Cria√ß√£o de um novo cupom.
 */
export const createCouponBodyCodeMin = 3;

export const createCouponBodyCodeMax = 50;
export const createCouponBodyValueMin = 0;
export const createCouponBodyDescriptionMax = 255;
export const createCouponBodyMaxUsesMin = 0;
export const createCouponBodyMinBookingValueMin = 0;


export const createCouponBody = zod.object({
  "code": zod.string().min(createCouponBodyCodeMin).max(createCouponBodyCodeMax),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FREE']),
  "value": zod.number().min(createCouponBodyValueMin),
  "scope": zod.enum(['GLOBAL', 'SERVICE', 'PROFESSIONAL']),
  "description": zod.string().max(createCouponBodyDescriptionMax).optional(),
  "maxUses": zod.number().min(createCouponBodyMaxUsesMin).optional(),
  "startDate": zod.string().datetime({}).optional(),
  "endDate": zod.string().datetime({}).optional(),
  "minBookingValue": zod.number().min(createCouponBodyMinBookingValueMin).optional(),
  "serviceId": zod.string().uuid().optional(),
  "professionalId": zod.string().uuid().optional()
})

/**
 * Lista todos os cupons com pagina√ß√£o.
 */
export const listCouponsQueryPageDefault = 1;
export const listCouponsQueryPageMin = 0;
export const listCouponsQueryLimitDefault = 10;
export const listCouponsQueryLimitMin = 0;

export const listCouponsQueryLimitMax = 100;


export const listCouponsQueryParams = zod.object({
  "page": zod.number().min(listCouponsQueryPageMin).default(listCouponsQueryPageDefault),
  "limit": zod.number().min(listCouponsQueryLimitMin).max(listCouponsQueryLimitMax).default(listCouponsQueryLimitDefault),
  "code": zod.string().optional(),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FREE']).optional(),
  "scope": zod.enum(['GLOBAL', 'SERVICE', 'PROFESSIONAL']).optional(),
  "active": zod.boolean().optional(),
  "startDate": zod.string().datetime({}).optional(),
  "endDate": zod.string().datetime({}).optional(),
  "sort": zod.array(zod.object({
  "field": zod.enum(['code', 'type', 'scope', 'createdAt', 'startDate', 'endDate', 'active', 'uses']),
  "order": zod.enum(['asc', 'desc'])
})).optional(),
  "professionalId": zod.string().uuid().optional(),
  "serviceId": zod.string().uuid().optional()
})

export const listCouponsResponse = zod.object({
  "coupons": zod.array(zod.object({
  "id": zod.string().uuid(),
  "code": zod.string(),
  "description": zod.string().nullable(),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FREE']),
  "value": zod.number(),
  "scope": zod.enum(['GLOBAL', 'SERVICE', 'PROFESSIONAL']),
  "maxUses": zod.number().nullable(),
  "uses": zod.number(),
  "startDate": zod.string().datetime({}),
  "endDate": zod.string().datetime({}).nullable(),
  "minBookingValue": zod.number().nullable(),
  "active": zod.boolean(),
  "createdAt": zod.string().datetime({}),
  "updatedAt": zod.string().datetime({}),
  "service": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string()
}).nullish(),
  "professional": zod.object({
  "id": zod.string().uuid(),
  "user": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string()
})
}).nullish(),
  "user": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string()
}).nullish()
})),
  "total": zod.number(),
  "page": zod.number(),
  "limit": zod.number(),
  "totalPages": zod.number()
})

/**
 * Retorna os detalhes de um cupom pelo ID.
 */
export const getCouponByIdParams = zod.object({
  "couponId": zod.string().uuid()
})

export const getCouponByIdResponse = zod.object({
  "coupon": zod.object({
  "id": zod.string().uuid(),
  "code": zod.string(),
  "description": zod.string().nullable(),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FREE']),
  "value": zod.number(),
  "scope": zod.enum(['GLOBAL', 'SERVICE', 'PROFESSIONAL']),
  "maxUses": zod.number().nullable(),
  "uses": zod.number(),
  "startDate": zod.string().datetime({}),
  "endDate": zod.string().datetime({}).nullable(),
  "minBookingValue": zod.number().nullable(),
  "active": zod.boolean(),
  "createdAt": zod.string().datetime({}),
  "updatedAt": zod.string().datetime({}),
  "service": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string()
}).nullish(),
  "professional": zod.object({
  "id": zod.string().uuid(),
  "user": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string()
})
}).nullish(),
  "user": zod.object({
  "id": zod.string().uuid(),
  "nome": zod.string()
}).nullish()
})
})

/**
 * Atualiza um cupom existente.
 */
export const updateCouponParams = zod.object({
  "couponId": zod.string().uuid()
})

export const updateCouponBodyCodeMin = 3;

export const updateCouponBodyCodeMax = 20;
export const updateCouponBodyValueMin = 0;
export const updateCouponBodyMinBookingValueMin = 0;


export const updateCouponBody = zod.object({
  "code": zod.string().min(updateCouponBodyCodeMin).max(updateCouponBodyCodeMax).optional(),
  "type": zod.enum(['PERCENTAGE', 'FIXED', 'FREE']).optional(),
  "value": zod.number().min(updateCouponBodyValueMin).optional(),
  "scope": zod.enum(['GLOBAL', 'SERVICE', 'PROFESSIONAL']).optional(),
  "description": zod.string().optional(),
  "maxUses": zod.number().min(1).optional(),
  "startDate": zod.string().datetime({}).optional(),
  "endDate": zod.string().datetime({}).nullish(),
  "minBookingValue": zod.number().min(updateCouponBodyMinBookingValueMin).nullish(),
  "serviceId": zod.string().uuid().nullish(),
  "professionalId": zod.string().uuid().nullish(),
  "active": zod.boolean().optional()
})

export const updateCouponResponse = zod.object({
  "message": zod.string()
})

/**
 * Deleta um cupom pelo ID.
 */
export const deleteCouponParams = zod.object({
  "couponId": zod.string().uuid()
})

/**
 * Ativa ou desativa o status de um cupom.
 */
export const toggleCouponStatusParams = zod.object({
  "couponId": zod.string().uuid()
})

export const toggleCouponStatusResponse = zod.object({
  "message": zod.string()
})

